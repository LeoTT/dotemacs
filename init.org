* about

- initial setup:
  - clone this repo
  - rename it to .emacs.d
  - put it in your home folder
  - open this file(init.org) in emacs
  - press M-x
  - enter org-babel-tangle
  - restart
- this configuration is structured and maintained using org-mode and use-package.
- it is mostly about typescript/javascript and general editing as of now
* todos

** TODO quick websearch (engine-mode)

** TODO init typescript files right

(defun init-typescript-file (orig-fun &rest args)
  (let ((new-buffer (apply orig-fun args)))
    (with-current-buffer 'new-buffer (insert "test"))))
(save-current-buffer
     (set-buffer ,buffer-or-name)
     ,@body)

(advice-add 'create-file-buffer :around #'init-typescript-file)

(advice-remove 'create-file-buffer #'init-typescript-file)
** secondary selection
(global-unset-key (kbd "<M-drag-mouse-1>"))   ; was mouse-set-secondary
(global-unset-key (kbd "<M-down-mouse-1>"))   ; was mouse-drag-secondary
(global-unset-key (kbd "<M-mouse-1>"))	  ; was mouse-start-secondary
(global-unset-key (kbd "<M-mouse-2>"))	  ; was mouse-yank-secondary
(global-unset-key (kbd "<M-mouse-3>"))	  ; was mouse-secondary-save-then-kill
* configuration
** configuring the configuration
this should stay at the top.
*** org-tangle this init
whenever I save init.org I want a new init.elc tangled and byte-compiled from it.
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (defun tangle-init ()
      "If the current buffer is 'init.org' the code-blocks are
    tangled, and the tangled file is compiled."
      (when (equal (buffer-file-name)
                   (expand-file-name (concat user-emacs-directory "init.org")))
        ;; Avoid running hooks when tangling.
        (let ((prog-mode-hook nil))
          (org-babel-tangle)
          (byte-compile-file (concat user-emacs-directory "init.el")))))
    (add-hook 'after-save-hook 'tangle-init)
  #+END_SRC
*** setup use-package
    use-package helps managing packages(download, lazy load, clean initializing and more).
    This part installs use-package if needed
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (eval-when-compile
      (require 'use-package))
    (require 'diminish)
    (require 'bind-key)
    #+END_SRC
** theme
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(load-theme 'tron t)
#+END_SRC

** get rid of stuff

   I want my editor to be minimalistic. This section gets rid of toolbars, scrollbars, noise, etc.

*** ring bell

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(setq ring-bell-function 'ignore)
#+END_SRC

*** disable toolbar

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(tool-bar-mode -1)
#+END_SRC

*** scrollbar

scrollbars take too many pixels
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(scroll-bar-mode 0)
   #+END_SRC

** basic configuration
*** register melpa package archives
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(add-to-list
   'package-archives
   ;; '("melpa" . "http://stable.melpa.org/packages/") ; many packages won't show if using stable
   '("melpa" . "http://melpa.milkbox.net/packages/")
   t)
    #+END_SRC
*** os-specific
**** osx
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

#+END_SRC
*** os-specific
**** osx
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(when (memq window-system '(mac ns))
  (setq mac-option-modifier 'super
        mac-command-modifier 'meta
        ns-right-command-modifier 'alt))

(use-package exec-path-from-shell
  :ensure t
  :config (exec-path-from-shell-initialize))

     (exec-path-from-shell-initialize)
#+END_SRC
*** misc

    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
      (put 'scroll-left 'disabled nil)
      (put 'erase-buffer 'disabled nil)
      (defadvice dired-mark-read-file-name (after rv:dired-create-dir-when-needed (prompt dir op-symbol arg files &optional default) activate)
        (when (member op-symbol '(copy move))
          (let ((directory-name (if (< 1 (length files))
                                    ad-return-value
                                    (file-name-directory ad-return-value))))
            (when (and (not (file-directory-p directory-name))
                       (y-or-n-p (format "directory %s doesn't exist, create it?" directory-name)))
              (make-directory directory-name t)))))
      (defun what-face (pos)
        (interactive "d")
        (let ((face (or (get-char-property (point) 'read-face-name)
                        (get-char-property (point) 'face))))
          (if face (message "Face: %s" face) (message "No face at %d" pos))))
    #+END_SRC

** basic configuration

*** org-tangle this init
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (defun tangle-init ()
      "If the current buffer is 'init.org' the code-blocks are
    tangled, and the tangled file is compiled."
      (when (equal (buffer-file-name)
                   (expand-file-name (concat user-emacs-directory "init.org")))
        ;; Avoid running hooks when tangling.
        (let ((prog-mode-hook nil))
          (org-babel-tangle)
          (byte-compile-file (concat user-emacs-directory "init.el")))))
    (add-hook 'after-save-hook 'tangle-init)
  #+END_SRC
*** setup use-package
    use-package helps managing packages(download, lazy load, clean initializing and more).
    This part installs use-package if needed
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (eval-when-compile
      (require 'use-package))
    (require 'diminish)
    (require 'bind-key)
    #+END_SRC
*** register melpa package archives
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/"))
    #+END_SRC
*** org-mode/latex
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (setq org-src-fontify-natively t)
     (use-package auctex
       :ensure t
       :defer t
       :config(progn
                (setq ispell-program-name "/usr/local/bin/aspell")
                (ispell-change-dictionary "de" t)
                (flyspell-mode 1)
                (setq TeX-PDF-mode t)
                (setq TeX-auto-save t)
                (setq TeX-parse-self t)))
(require 'ox-latex)
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
(add-to-list 'org-latex-classes
             '("myarticle" "\\documentclass[11pt]{myarticle}"
  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
   #+END_SRC
*** maximize window at startup
maximizes window without using useless osx fullscreen mode
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(add-hook 'window-setup-hook 'toggle-frame-maximized t)
   #+END_SRC
*** modeline
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (use-package dim
       :ensure t
       :config
       (dim-major-names
        '((emacs-lisp-mode           "EL")
          (inferior-emacs-lisp-mode  "EL>")
          (typescript-mode           "TS")
          (calendar-mode             "ðŸ“†")))
       (dim-minor-names
        '((tide-mode                 " ti")
          (company-mode              " cmpy")
          (eldoc-mode                " doc"))))
   #+END_SRC
*** scrollbar
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(use-package yascroll
  :ensure t
  :config (global-yascroll-bar-mode 1))
   #+END_SRC
*** shell configuration
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(setq explicit-shell-file-name "/bin/bash")
   #+END_SRC
*** indentation
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (setq standard-indent 2
           tab-width 2)
     (setq-default indent-tabs-mode nil
                   tab-width 2)

     (use-package indent-guide
       :ensure t
       :config (indent-guide-global-mode 1))
   #+END_SRC
*** snippets

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (use-package yasnippet
       :ensure t
       :config (yas-global-mode 1))
   #+END_SRC
*** navigation
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (use-package ace-jump-mode
       :ensure t
       :bind (("C-Ã¼" . ace-jump-mode)
              ("<f9>" . ace-jump-mode)
              ("<f12>" . ace-jump-mode)
              ("<f8>" . ace-jump-char-mode)))
     (use-package ace-window
       :ensure t
       :bind (("M-Ã¼" . ace-window)
              ("A-Ã¼" . ace-window)))
     (use-package helm
       :ensure t)

     (use-package helm-ag
       :ensure t
       :bind (("M-Ã¶" . helm-ag)))
     (use-package ido
       :ensure t
       :config (ido-mode 1))

     (use-package ido-vertical-mode
       :ensure t
       :config
       (setq ido-vertical-define-keys 'C-n-and-C-p-only)
       (ido-vertical-mode 1))

     (use-package smex
       :ensure t
       :config (global-set-key (kbd "M-x") 'smex))

   #+END_SRC

*** autocompletion
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
smarter than emacs default auto-completion
(use-package hippie-exp
  :ensure t
  :defer t
  :bind (("M-Ã¤" . hippie-expand)))
   #+END_SRC
*** whitespace
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC
*** git porcelain
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

(use-package magit-gitflow
  :ensure t)

(use-package magit
  :ensure t
  :config
  (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))

   #+END_SRC
*** backup
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (setq backup-directory-alist `(("." . "~/.saves"))
           backup-by-copying t)
   #+END_SRC
*** epub
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (use-package nov
       :ensure t
     )
   #+END_SRC
*** emacs documentation
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(use-package which-key
  :ensure t
  :config
    (which-key-mode))
   #+END_SRC

*** keysettings
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (global-set-key (kbd "s-5") nil)
     (define-key key-translation-map (kbd "s-5") (kbd "["))
     (global-set-key (kbd "s-6") nil)
     (define-key key-translation-map (kbd "s-6") (kbd "]"))
     (global-set-key (kbd "s-7") nil)
     (define-key key-translation-map (kbd "s-7") (kbd "|"))
     (global-set-key (kbd "s-S-7") nil)
     (define-key key-translation-map (kbd "s-S-7") (kbd "\\"))
     (global-set-key (kbd "s-8") nil)
     (define-key key-translation-map (kbd "s-8") (kbd "{"))
     (global-set-key (kbd "s-9") nil)
     (define-key key-translation-map (kbd "s-9") (kbd "}"))
     (global-set-key (kbd "s-l") nil)
     (define-key key-translation-map (kbd "s-l") (kbd "@"))
     (global-set-key (kbd "s-/") nil)
     (define-key key-translation-map (kbd "s-/") (kbd "\\"))
     (global-set-key (kbd "s-n") nil)
     (define-key key-translation-map (kbd "s-n") (kbd "~"))

     (define-key key-translation-map (kbd "Ã¶") (kbd ";"))
     (define-key key-translation-map (kbd "Ã¤") (kbd ":"))
     (define-key key-translation-map (kbd ";") (kbd "Ã–"))
     (define-key key-translation-map (kbd ":") (kbd "Ã„"))
     (define-key key-translation-map (kbd "Ã–") (kbd "Ã¶"))
     (define-key key-translation-map (kbd "Ã„") (kbd "Ã¤"))
     (define-key key-translation-map (kbd "#") (kbd "'"))
     (define-key key-translation-map (kbd "'") (kbd "#"))

     (use-package key-chord
       :ensure t
       :config
       (key-chord-mode t)
       (key-chord-define-global "ff" 'find-file)
       (key-chord-define-global "55" (lambda () (interactive) (insert "/")))
       (key-chord-define-global "z7" (lambda () (interactive) (insert "/")))
       (key-chord-define-global "66" (lambda () (interactive) (insert "&")))
       (key-chord-define-global "77" (lambda () (interactive) (insert "]")))
       (key-chord-define-global "88" (lambda () (interactive) (insert ")")))
       (key-chord-define-global "99" (lambda () (interactive) (insert "}"))))

     (when (memq window-system '(mac ns))


       (define-key key-translation-map (kbd "Â§") (kbd "&"))
       (define-key key-translation-map (kbd "6") (kbd "6"))
       (define-key key-translation-map (kbd "&") (kbd "/"))
       (define-key key-translation-map (kbd "/") (kbd "["))
       (define-key key-translation-map (kbd "9") (kbd "9"))
       (define-key key-translation-map (kbd ")") (kbd "{"))
       (define-key key-translation-map (kbd "ÃŸ") (kbd "?"))
       (define-key key-translation-map (kbd "?") (kbd "ÃŸ"))
     )

     (global-set-key (kbd "C-S-n") 'copy-line)
     ;; (global-set-key (kbd "M-Ã¶") 'dirgrep)


     (global-set-key (kbd "C-^") 'toggle-frame-maximized)

     (global-set-key (kbd "<s-up>") 'windmove-up)
     (global-set-key (kbd "<s-left>") 'windmove-left)
     (global-set-key (kbd "<s-down>") 'windmove-down)
     (global-set-key (kbd "<s-right>") 'windmove-right)
   #+END_SRC
*** flycheck
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(use-package flycheck
  :ensure t
  :config
  (progn
    (flycheck-add-mode 'javascript-eslint 'web-mode)
    (flycheck-add-mode 'javascript-eslint 'js2-mode)
    (flycheck-add-mode 'typescript-tslint 'typescript-mode)
    (setq-default flycheck-disabled-checkers
                  (append flycheck-disabled-checkers
                          '(javascript-jshint))

                  flycheck-disabled-checkers
                  (append flycheck-disabled-checkers
                          '(json-jsonlist))

                  ;; flycheck-disabled-checkers
                  ;; (append flycheck-disabled-checkers
                  ;;         '(typescript-tide))

                  flycheck-temp-prefix ".flycheck")
    (global-flycheck-mode 1)))

   #+END_SRC
*** yasnippet
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(use-package yasnippet
:ensure t
:config
(yas-global-mode 1))

#+END_SRC

*** presentation
based on orgmode, pandoc, revealjs
- =init-presentation= creates empty project
- =compile-presentation= uses org-tangle and pandoc to create project(maybe not tangle but custom pandoc template)
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(defun init-presentation ()
  (interactive)
  (shell-command "wget https://github.com/hakimel/reveal.js/archive/master.tar.gz")
  (shell-command "tar -xzvf master.tar.gz")
  (shell-command "Mv reveal.js-master reveal.js"))
(require 'ox-pandoc)
(require 'org)
*** org languages


#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (awk . t)
     (calc .t)
     (C . t)
     (emacs-lisp . t)
     (haskell . t)
     (gnuplot . t)
     (latex . t)
     ;;(ledger . t)
     (js . t)
     (haskell . t)
     (perl . t)
     (python . t)
     ;; (gnuplot . t)
     (sh . t)))
#+END_SRC

#+END_SRC

*** 1984
I want to track what I'm doing and when.
This adds an entry in a csv file for every saved file
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(defun make-1984-entry ()
  (interactive)
  (let* (
;; (description (read-string "What are you doing(no commata):"))
       (current-date (calendar-current-date))
       (current-year (nth 2 current-date))
       (current-month (car current-date))
       (current-day (nth 1 current-date))
       (output-directory (format "~/.emacs.d/1984/%d/%d" current-year current-month current-day)))
  (make-directory output-directory t)
  (shell-command (format "echo \"%s,%s\" >> %s/%s.csv"
;;                         description
                         (current-time-string)
                         buffer-file-name
                         output-directory
                         current-day))))

(add-hook 'after-save-hook 'make-1984-entry)
#+END_SRC

** programming
*** haskell
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     ;; (use-package haskell-mode
     ;;   :ensure t
     ;;   :mode "\\.hs$"
     ;;   :config
     ;;     (add-hook 'haskell-mode-hook 'prettify-symbols-mode)
     ;;     (add-hook 'haskell-mode-hook
     ;;               (lambda ()
     ;;                 (push '("<=" . ?â‰¤) prettify-symbols-alist)
     ;;                 (push '("->" . ?â†’) prettify-symbols-alist)
     ;;                 (push '(">=" . ?â‰¥) prettify-symbols-alist)
     ;;                 (push '("!=" . ?â‰ ) prettify-symbols-alist))))
   #+END_SRC
*** elisp
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (defconst lisp--prettify-symbols-alist
       '(("lambda"  . ?Î»)))

          (add-hook 'emacs-lisp-mode-hook
                    '(lambda () (progn
                                  (prettify-symbols-mode t)
                                  (show-paren-mode t)
                                  (electric-pair-mode t))))

          (use-package rainbow-delimiters
            :ensure t
            :init
              (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))
   #+END_SRC
*** web(html, css)
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (use-package web-mode
       :ensure t
       :mode ("\\.html\\'"  "\\.css\\'" "\\.tsx\\'" "\\.jsx\\'")
       :interpreter "web"
       :config
       (setq web-mode-enable-auto-quoting nil
             web-mode-enable-current-element-highlight t
             web-mode-markup-indent-offset 2))

     (use-package emmet-mode
       :ensure t
       :commands (emmet-mode)
       :init
         (add-hook 'web-mode-hook #'emmet-mode)
       :config (when (and (stringp buffer-file-name)
                      (string-match "\\.css\\'" buffer-file-name))
                 (setq emmet-use-css-transform t)))


   #+END_SRC
*** python
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (use-package company-jedi
       :ensure t
       :config
       (defun my/python-mode-hook ()
         (add-to-list 'company-backends 'company-jedi))

       (add-hook 'python-mode-hook 'my/python-mode-hook))

   #+END_SRC
*** javascript
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     (use-package js2-mode
       :ensure t
       :defer 1
       :mode "\\.js$"
       :config
         (add-hook 'js2-mode-hook 'prettify-symbols-mode)
         (add-hook 'js2-mode-hook
                   (lambda ()
                     'prettify-symbols-mode
                     (push '("<=" . ?â‰¤) prettify-symbols-alist)
                     (push '(">=" . ?â‰¥) prettify-symbols-alist)
                     (push '("=>" . ?âŸ¹) prettify-symbols-alist)
                     (push '("!==" . ?â‰ ) prettify-symbols-alist)))
         (font-lock-add-keywords 'js2-mode
                                 '(("require" . font-lock-keyword-face)))
         (setq
          js-indent-level 2
          js2-basic-offset 2
          js2-bounce-indent-p t
          js2-strict-missing-semi-warning nil
          js2-concat-multiline-strings nil
          js2-include-node-externs t
          js2-skip-preprocessor-directives t
          js2-strict-inconsistent-return-warning nil))

     (use-package indium
       :ensure t)

   #+END_SRC
*** typescript
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(defun is-current-line-end-of-function ()
    "returns nil if current line is end of a function expression"
    (string-match-p ")\\(: [^ ]*\\)?\\ \\(=> \\)?{" (thing-at-point 'line t)))

     (use-package tide
       :ensure t
       :defer 1
       :bind (("C-c <up>" . tide-jump-to-definition))
       :config
       (progn
         (add-hook 'typescript-mode-hook #'setup-tide-mode)
         (add-hook 'js2-mode-hook #'setup-tide-mode)
         (flycheck-add-next-checker 'typescript-tide '(t . typescript-tslint) 'append)
         (setq tide-format-options '(
                                 :insertSpaceAfterFunctionKeywordForAnonymousFunctions t
                                 :placeOpenBraceOnNewLineForFunctions nil))))

     (use-package typescript-mode
       :ensure t
       :mode "\\.ts$"
       :config
       (setq typescript-indent-level 2)
       (add-hook 'typescript-mode-hook 'prettify-symbols-mode)
       (add-hook 'typescript-mode-hook
                 (lambda ()
                   'prettify-symbols-mode
                   (push '("<=" . ?â‰¤) prettify-symbols-alist)
                   (push '(">=" . ?â‰¥) prettify-symbols-alist)
                   (push '("=>" . ?âŸ¹) prettify-symbols-alist)
                   (push '("!==" . ?â‰ ) prettify-symbols-alist)))
       (defun typescript--proper-indentation (parse-status)
         "Overwriting original function in order to fix multiparam/newline indentation"
         (save-excursion
           (back-to-indentation)
           (cond ((nth 4 parse-status)
                  (typescript--get-c-offset 'c (nth 8 parse-status)))
                 ((nth 8 parse-status) 0) ; inside string
                 ((typescript--ctrl-statement-indentation))
                 ((eq (char-after) ?#) 0)
                 ((save-excursion (typescript--beginning-of-macro)) 4)
                 ((nth 1 parse-status)
                  (let ((same-indent-p (looking-at
                                        "[]})]\\|\\_<case\\_>\\|\\_<default\\_>"))
                        (continued-expr-p (typescript--continued-expression-p)))
                    (goto-char (nth 1 parse-status))
                    (if (looking-at "[({[]\\s-*\\(/[/*]\\|$\\)")
                        (progn
                          (skip-syntax-backward " ")
                          (when (eq (char-before) ?\)) (backward-list))


                          (if (is-current-line-end-of-function)
                              (unless (string-match-p "[(]" (thing-at-point 'line t))
                              (condition-case nil
                                  (re-search-backward "[(]")
                                (error nil))))

                          (back-to-indentation)
                          (cond (same-indent-p
                                 (current-column))
                                (continued-expr-p
                                 (+ (current-column) (* 2 typescript-indent-level)
                                    typescript-expr-indent-offset))
                                (t
                                 (+ (current-column) typescript-indent-level))))
                      (unless same-indent-p
                        (forward-char)
                        (skip-chars-forward " \t"))
                      (current-column))))
                 ((typescript--continued-expression-p)
                  (+ typescript-indent-level typescript-expr-indent-offset))
                 (t 0)))))
     (defun setup-tide-mode()
       (interactive)
       (tide-setup)
         ;; (flycheck-mode +1)
         ;; (setq flycheck-check-syntax-automatically '(save mode-enabled))
         (eldoc-mode +1)
         (tide-hl-identifier-mode +1)
         (company-mode +1))
     (defun next-import ()
       (condition-case nil
           (progn
             (re-search-forward "^import.*from.*$")
             (move-beginning-of-line 1))
         (error
          (goto-char (point-max)))))

     (defun import-start-key ()
       (search-forward "'" nil nil)
       ;; find  a better way to return nil
       (quote nil))

     (defun import-sort ()
         "Typescript/ES6 import sort"
         (interactive)
         (save-excursion
           (goto-char (point-min))
           (next-import)
               (sort-subr nil 'next-import 'end-of-line 'import-start-key 'import-start-key)))
   #+END_SRC





   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

   #+END_SRC
